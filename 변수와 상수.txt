1. 데이터를 담는 변수와 상수

    ALU(Arithmetic Logic Unit): 정수만 처리
        ex) 10, 0, 3
    FPU(Floating Point Unit): 부동소수점 수만 처리
        ex) 12.34, 3.14, 697.4

    데이터 형식(Data Type)
        데이터의 '유형'과 '크기'를 지정
        기본 데이터 형식
            정수 형식(char/uchar, signed byte/byte, short/ushort, int/uint)
            부동 소수형식(float, double)
        복합 데이터 형식
            클래스
            구조체
            인터페이스
    변수(Variable)
        데이터를 저장할 수 있는 메모리 공간
        코드에서 이름(식별자 Identifier)을 붙여 사용

    스택(Stack)
        데이터를 쌓아 올리는 구조의 메모리
        나중에 쌓인 데이터를 먼저 제거
        처음에 쌓인 데이터를 나중에 제거
        쌓인 순서의 역순으로 필요 없는 데이터를 자동으로 제거(자동 메모리)
    힙(Heap)
        자유롭게 데이터를 저장할 수 있는 메모리 -> 자유 저장소

    값 형식(Calue Type)
        메모리에 값을 담는 데이터 형식
        스택에 할당(즉, 자동으로 제거됨)
        기본 데이터 형식과 구조체가 여기에 해당

    참조형식(Reference Type)
        메모리에 다른 변수의 주소를 담는 데이터 형식
        힙에 할당(가비지 콜렉터에 의해 제거됨)
        복합 데이터 형식과 클래스 등이 여기에 해당

    기본 데이터 형식(Primitive Type)
        c#이 제공하는 기본 데이터 형식
            수 형식
                정수 형식(int/uint, short/ushort, byte/sbyte ...)
                부동 소수점 형식 (float, double, decimal)
            논리 형식(bool)
            문자열 형식(string)
            object 형식
        복합 데이터 형식은 기본 데이터 형식을 바탕으로 만들어짐

    박싱(Boxing), 언박싱(Unboxing)
        박싱: 값 형식을 object 형식에 담아 힙에 올림
        언박싱: 힙에 올라가 있는 데이터를 object에서 꺼내 값 형식으로 옮기기

    상수(Constant)
        변수: 변경이 가능한 수
        상수: 항상 최초의 상태를 유지하는 수
        const 키워드를 이용하여 선언
        JAVA의 final과 같음

    열거형식(Enumerated Type)
        하나의 이름 아래 묶인 상수들의 집합
        enum 키워드를 이용하여 선언
    
    var 키워드
        var 키워드로 선언한 변수는 컴파일러가 리터럴을 분석하여 자동으로 형식을 추론함
        지역 변수에 대해서만 사용 가능